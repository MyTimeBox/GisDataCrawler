# -*- coding:utf-8 -*-
# Author:PasserQi
# Time:2017/9/29
# Function:矢量化厦门市公园范围
import json
import time
import urllib

import arcgisscripting
import arcpy
import os, random
from bs4 import BeautifulSoup

outPath = [r"D:\MyWorkSpace\商城_超级市场.shp",
           r"D:\MyWorkSpace\楼宇_住宅.shp",
           r"D:\MyWorkSpace\高尔夫_足球场.shp",
           r"D:\MyWorkSpace\风景名胜.shp",
           r"D:\MyWorkSpace\政府机关.shp",
           r"D:\MyWorkSpace\高等院校.shp",
           r"D:\MyWorkSpace\中学_小学.shp",
           ]

AMAP_API_KEY = "911f302a47869cd1d5ab622369ed52ac" #高德地图密匙
urlParamJson = {
    'city' : '郑州',
    'output' : 'xml',
    'key' : AMAP_API_KEY,
    'types' : '',
    'citylimit' : 'true', #只返回指定城市数据
    'offset' : '20'#每页条数
}

MAX_PAGE = 100 #最大页数

class_list =[['商城', '超级市场'],
             ['楼宇', '住宅'],
             ['高尔夫球场', '足球场'],
             ['风景名胜'],
             ['政府机关'],
             ['高等院校'],
             ['中学', '小学']]


# return: list 厦门市公园POI的ID
def getParkPoiid(tps):

    poiidList = []
    for tp in tps:
        for page in range(1,MAX_PAGE) : #页数
            urlParamJson["page"] = page
            urlParamJson['types'] = tp
            print "当前 %s 页..." % page
            params = urllib.urlencode(urlParamJson)
            url = "http://restapi.amap.com/v3/place/text?%s" % params
            http = urllib.urlopen(url)
            dom = BeautifulSoup(http)
            poiList = dom.findAll("poi")
            if len(poiList)==0: #没有数据时则跳出
                break
            for poi in poiList:
                poiid = poi.id.get_text()
                poiidList.append(poiid.encode("utf8") )
                

    return poiidList


def getParkInfoList(poiidList):
    parkInfoList = []
    i = 1 #number
    for poiid in poiidList:
        parkInfo = {}
        params = urllib.urlencode({
            'id' : poiid,
            'key' : AMAP_API_KEY
        })
        url = "http://ditu.amap.com/detail/get/detail?%s" % params

        print "查询url %s" % url

        http = urllib.urlopen(url)
        jsonStr = http.read()
        park = json.loads(jsonStr)
        spec = park["data"]["spec"] #spec每个数据都有
        haveShp = "没有"
        if 'mining_shape' in spec.keys():
            #有 面状或线状 信息
            haveShp = "有"
            parkInfo["shape"] = spec["mining_shape"]["shape"] #保存 shape属性
            parkInfo["name"] = park["data"]["base"]["name"].encode("utf8")
            parkInfo["type"] = park["data"]["base"]["business"].encode("utf8")
            parkInfoList.append(parkInfo)

            if len(parkInfoList) % 11 == 0:
                print "已获取 %s 个公园的矢量信息" % len(parkInfoList)

        print "%s ：%s" % (park["data"]["base"]["name"].encode("utf8"), haveShp )
        time.sleep(1)
        i = i+1
        if i%51==0:
            time.sleep(30)
    return parkInfoList

# @funtion: 通过coordinates解析出XY的数组
# @param: coordinates字符串 格式"x,y;x,y;x,y..."
# @desc: 传入为gcj02坐标系坐标，返回wgs84坐标
# @dependence: arcpy,coordinate_conversion
# @return: arcpy.array
def getXYArray(XYsStr):
    XYarray = arcpy.CreateObject("array")
    XYList = XYsStr.split(';')
    for XYstr in XYList:
        XY = XYstr.split(',')
        XY[0],XY[1] = float(XY[0]),float(XY[1])
        point = arcpy.CreateObject("point")
        point.X,point.Y = XY[0], XY[1]
        XYarray.add(point)
    return XYarray

def saveParkPolygon(parkInfoList, path):
    gp = arcgisscripting.create()

    outWorkspace = os.path.split(path)[0]
    outName = os.path.split(path)[-1]
    spat_ref = "4326"
    gp.CreateFeatureClass_management(outWorkspace, outName, "POLYGON", "", "", "", spat_ref)

    gp.AddField_management(path, "name", "TEXT", field_length=250)
    gp.AddField_management(path, "type", "TEXT", field_length=250)

    cur = gp.InsertCursor(path)
    newRow = cur.newRow()
    for parkInfo in parkInfoList:
        for attr in parkInfo:
            if attr=="shape":
                # array = getXYArray(parkInfo["shape"])
                XYsStr = parkInfo["shape"]
                XYarray = gp.CreateObject("array")
                XYList = XYsStr.split(';')
                for XYstr in XYList:
                    XY = XYstr.split(',')
                    XY[0], XY[1] = float(XY[0]), float(XY[1])
                    point = gp.CreateObject("point")
                    point.X, point.Y = XY[0], XY[1]
                    XYarray.add(point)
                newRow.setValue("Shape",XYarray)
            else:
                newRow.setValue(attr, parkInfo[attr] )
        cur.InsertRow(newRow)
    del cur,newRow



if __name__ == '__main__':
    for index,tps in enumerate(class_list):
        poiidList = getParkPoiid(tps) #得到公园id
        print "已得到 %s 个%sPOI ID" % (len(poiidList), (",").join(tps))
    
        parkInfoList = getParkInfoList(poiidList)
        #parkInfoList = [{'shape': u'118.11203,24.458962;118.112197,24.45886;118.112304,24.458704;118.11235,24.458647;118.112492,24.458544;118.112882,24.458353;118.113283,24.458224;118.113591,24.458048;118.113717,24.45783;118.113785,24.457541;118.113885,24.457319;118.113993,24.457278;118.11421,24.457296;118.11432,24.457357;118.114345,24.457382;118.114557,24.457777;118.114641,24.457874;118.114777,24.457897;118.114897,24.457897;118.116134,24.457219;118.116184,24.457175;118.116233,24.457068;118.116214,24.456809;118.116155,24.456732;118.116141,24.456708;118.116079,24.456565;118.115461,24.455835;118.115436,24.455759;118.115464,24.455657;118.115926,24.455163;118.116043,24.455158;118.11617,24.45524;118.116361,24.455502;118.11656,24.455836;118.11673,24.455924;118.116836,24.455927;118.117003,24.45588;118.117111,24.455775;118.117178,24.45562;118.117064,24.455397;118.117,24.455235;118.116992,24.455094;118.116991,24.45498;118.117027,24.454778;118.117086,24.454619;118.117145,24.454498;118.11728,24.454348;118.11755,24.45413;118.117645,24.454039;118.117999,24.453776;118.118316,24.453527;118.118415,24.453437;118.118621,24.453273;118.118681,24.453225;118.118843,24.453118;118.119016,24.45304;118.119298,24.45292;118.119511,24.45283;118.119633,24.45278;118.119861,24.452681;118.12002,24.452554;118.120127,24.45247;118.120328,24.452321;118.120676,24.452011;118.120843,24.451873;118.121076,24.451681;118.121462,24.451384;118.12175,24.451195;118.121868,24.451064;118.121969,24.450894;118.122046,24.450698;118.122129,24.450336;118.12215,24.450267;118.122234,24.45013;118.122352,24.44998;118.122476,24.449867;118.122633,24.449778;118.122761,24.4497;118.123088,24.449583;118.12323,24.449508;118.123352,24.449399;118.123442,24.449285;118.123498,24.4492;118.123547,24.449082;118.1236,24.44884;118.123723,24.448305;118.123789,24.447974;118.123843,24.447688;118.123874,24.447607;118.123963,24.44743;118.124134,24.447265;118.124396,24.447105;118.124648,24.446954;118.124826,24.446843;118.124925,24.446722;118.124982,24.446469;118.124961,24.445749;118.124937,24.445377;118.125422,24.443934;118.125493,24.443561;118.125498,24.443199;118.125523,24.443057;118.125472,24.442866;118.125361,24.442659;118.125114,24.442328;118.124984,24.442158;118.12477,24.442061;118.124297,24.442046;118.124097,24.442097;118.123962,24.442317;118.123908,24.442546;118.123853,24.442658;118.123535,24.442744;118.1234,24.4428;118.123271,24.442795;118.123151,24.442724;118.122907,24.442674;118.122569,24.442722;118.122152,24.442738;118.121929,24.442636;118.121802,24.442437;118.121848,24.442227;118.121956,24.442121;118.122149,24.442045;118.122232,24.441935;118.122229,24.441743;118.122256,24.441603;118.122488,24.440513;118.122444,24.440417;118.122302,24.440358;118.121484,24.440349;118.121201,24.440497;118.12094,24.440853;118.1208,24.441075;118.120648,24.441207;118.120375,24.441304;118.120121,24.441294;118.119974,24.441261;118.119885,24.441187;118.11987,24.440978;118.119796,24.440747;118.119676,24.440684;118.119364,24.440681;118.119257,24.440549;118.119181,24.440417;118.119145,24.440289;118.118959,24.440262;118.118799,24.44033;118.118718,24.440471;118.118675,24.4406;118.118764,24.441015;118.118693,24.441104;118.1184,24.441249;118.118187,24.441308;118.118032,24.441364;118.117849,24.441586;118.117706,24.441593;118.117528,24.441637;118.117462,24.441749;118.117487,24.44189;118.117595,24.441975;118.117769,24.442063;118.117786,24.442122;118.117794,24.44217;118.117769,24.442296;118.117524,24.442725;118.117303,24.44314;118.117259,24.443164;118.116987,24.443293;118.116657,24.443494;118.116617,24.443606;118.116581,24.443805;118.11619,24.444147;118.115878,24.444294;118.115774,24.44429;118.115609,24.444258;118.11551,24.444158;118.115472,24.444039;118.115492,24.443464;118.11548,24.44338;118.115409,24.443242;118.115261,24.443138;118.115096,24.443057;118.115052,24.442986;118.115081,24.442891;118.115253,24.442621;118.115279,24.442477;118.115261,24.442281;118.115241,24.442135;118.115235,24.442013;118.115239,24.441895;118.115648,24.441077;118.115562,24.44085;118.115333,24.440595;118.115314,24.440474;118.115366,24.440293;118.115694,24.440035;118.11572,24.439892;118.115626,24.439835;118.115524,24.439755;118.115465,24.439641;118.115479,24.439533;118.115481,24.439465;118.115478,24.439454;118.115407,24.43944;118.115225,24.439501;118.114404,24.439896;118.114237,24.439863;118.114071,24.439681;118.113812,24.439416;118.113764,24.439205;118.113746,24.438849;118.113771,24.438405;118.112881,24.438402;118.11283,24.43805;118.112817,24.437699;118.112872,24.436588;118.112775,24.436412;118.112787,24.43619;118.112884,24.436039;118.112968,24.435797;118.112926,24.435484;118.112468,24.434929;118.112323,24.434664;118.112288,24.433991;118.112154,24.433821;118.111856,24.433739;118.111655,24.433696;118.111594,24.433589;118.111622,24.433376;118.111716,24.433228;118.111871,24.433129;118.112375,24.43279;118.112458,24.432757;118.112753,24.432627;118.11284,24.4325;118.112843,24.432286;118.112807,24.43207;118.112692,24.431971;118.112672,24.431823;118.11281,24.431668;118.113211,24.431471;118.113195,24.431447;118.112169,24.431488;118.112115,24.431523;118.112095,24.431617;118.112059,24.43181;118.112056,24.432562;118.111982,24.43272;118.111929,24.432784;118.111697,24.432921;118.110623,24.43305;118.110536,24.433106;118.110461,24.433182;118.110322,24.43356;118.110122,24.434015;118.109905,24.434343;118.109649,24.434804;118.109231,24.435362;118.109123,24.435488;118.108981,24.4358;118.108911,24.435962;118.10895,24.436876;118.10834,24.440195;118.1079,24.441159;118.107218,24.441786;118.106327,24.442078;118.105699,24.442004;118.104694,24.441799;118.104158,24.441631;118.104105,24.441629;118.104057,24.441646;118.1038,24.44192;118.103566,24.442251;118.103522,24.442318;118.103512,24.442367;118.103516,24.442417;118.103536,24.44247;118.103589,24.442535;118.103634,24.442573;118.103743,24.442645;118.103895,24.442788;118.103916,24.442834;118.103919,24.442867;118.103924,24.442926;118.103918,24.442974;118.103852,24.443049;118.103769,24.443143;118.103624,24.443261;118.10343,24.44331;118.103377,24.443309;118.103321,24.443286;118.103266,24.443231;118.10314,24.443066;118.103091,24.443047;118.103037,24.443047;118.102875,24.443087;118.102741,24.443096;118.10264,24.443073;118.102488,24.442965;118.102253,24.442917;118.102135,24.442734;118.102123,24.442708;118.101815,24.442539;118.101713,24.442343;118.10169,24.442161;118.101799,24.441982;118.101904,24.441915;118.102084,24.441795;118.102306,24.441562;118.102333,24.441393;118.102212,24.440734;118.102055,24.440261;118.101986,24.440078;118.101929,24.44005;118.101709,24.43999;118.101413,24.439784;118.101278,24.439736;118.101224,24.439716;118.101054,24.439666;118.100986,24.439685;118.100898,24.439717;118.100866,24.439748;118.100849,24.439776;118.100838,24.439846;118.10081,24.439975;118.100785,24.440067;118.100797,24.44012;118.100796,24.440213;118.100788,24.440275;118.100747,24.440612;118.10068,24.440883;118.100623,24.441011;118.100534,24.44109;118.100382,24.441158;118.100247,24.441222;118.09993,24.44136;118.099796,24.441376;118.099466,24.441422;118.099271,24.441418;118.099078,24.441415;118.098935,24.441434;118.098846,24.441478;118.098671,24.44158;118.098411,24.441703;118.098293,24.441765;118.09784,24.44195;118.097568,24.442071;118.09715,24.442269;118.096891,24.442432;118.096683,24.442522;118.096355,24.442474;118.095838,24.442436;118.095513,24.442451;118.095381,24.442501;118.095351,24.442883;118.095372,24.444325;118.095398,24.444558;118.09577,24.445264;118.096311,24.44614;118.096789,24.447016;118.097017,24.447467;118.09741,24.447939;118.097994,24.448395;118.098375,24.448631;118.098554,24.448715;118.09925,24.448957;118.0997,24.449082;118.099789,24.449111;118.099837,24.449165;118.099862,24.449248;118.099853,24.449326;118.099828,24.449399;118.09976,24.449625;118.099679,24.449754;118.099584,24.449794;118.099455,24.449808;118.099211,24.449754;118.098614,24.449607;118.098458,24.449603;118.098329,24.449613;118.098254,24.449638;118.09822,24.449681;118.098211,24.449744;118.098227,24.449817;118.098247,24.449873;118.098347,24.450009;118.098392,24.450127;118.098394,24.450233;118.098372,24.450289;118.098329,24.450348;118.098266,24.450375;118.098207,24.450391;118.09813,24.450373;118.098053,24.450296;118.097983,24.450133;118.097897,24.449941;118.097829,24.449774;118.097784,24.449724;118.097707,24.449708;118.097655,24.44972;118.097607,24.449751;118.097535,24.449844;118.0972,24.4505;118.097107,24.450608;118.097029,24.45066;118.096922,24.4507;118.096843,24.450719;118.096764,24.450719;118.096484,24.450689;118.096201,24.450685;118.09604,24.450716;118.095954,24.450752;118.095877,24.450856;118.095828,24.450974;118.095812,24.451031;118.095805,24.451119;118.095812,24.4514;118.095789,24.451596;118.095746,24.451726;118.095676,24.45186;118.095579,24.452019;118.09545,24.452143;118.095176,24.452313;118.095056,24.452405;118.09495,24.4526;118.094776,24.452858;118.094704,24.452873;118.094645,24.452837;118.094624,24.45276;118.094645,24.452627;118.094667,24.452558;118.094666,24.452538;118.094652,24.452518;118.094494,24.452466;118.094464,24.452468;118.094446,24.452482;118.094323,24.452789;118.094287,24.452839;118.094163,24.452945;118.094125,24.452977;118.093948,24.453165;118.093912,24.453242;118.093858,24.45347;118.093821,24.453633;118.093817,24.45368;118.093808,24.453796;118.093822,24.453881;118.093853,24.453921;118.09393,24.453993;118.094005,24.454062;118.094076,24.454129;118.094186,24.45423;118.094247,24.454287;118.094288,24.454321;118.094323,24.454353;118.094346,24.454375;118.094366,24.454395;118.094393,24.454423;118.094434,24.454459;118.094465,24.454479;118.094556,24.454538;118.094681,24.454617;118.094785,24.454701;118.094943,24.454853;118.09501,24.454873;118.095098,24.454901;118.095653,24.454983;118.095739,24.45502;118.095801,24.455045;118.095839,24.455131;118.095896,24.455171;118.095966,24.455235;118.09607,24.455262;118.096201,24.455246;118.096215,24.455237;118.09628,24.455208;118.096359,24.455167;118.096459,24.455075;118.096536,24.454986;118.096604,24.454939;118.096724,24.454879;118.09683,24.454864;118.096904,24.454864;118.096972,24.454878;118.097047,24.454912;118.097128,24.454955;118.097212,24.455027;118.097336,24.455102;118.097436,24.455111;118.097633,24.455093;118.097807,24.455079;118.09792,24.455077;118.098081,24.455109;118.09816,24.455104;118.098234,24.455098;118.098519,24.454957;118.098653,24.454901;118.098773,24.454869;118.098917,24.454869;118.099195,24.45489;118.099376,24.454894;118.099657,24.454876;118.099819,24.454826;118.099926,24.454792;118.099991,24.454788;118.100111,24.454829;118.100192,24.454892;118.100324,24.455048;118.100414,24.455152;118.100536,24.455245;118.100583,24.455274;118.100647,24.455302;118.100777,24.455331;118.100894,24.455356;118.101045,24.455381;118.101096,24.455383;118.101258,24.455381;118.101384,24.455347;118.101506,24.455277;118.101809,24.455089;118.101861,24.455062;118.101898,24.45504;118.102083,24.454964;118.102196,24.454891;118.102288,24.454759;118.105101,24.457132;118.105009,24.457301;118.105228,24.457443;118.105427,24.45756;118.105565,24.457523;118.10576,24.457271;118.105914,24.457107;118.105961,24.457068;118.106525,24.457425;118.106632,24.457491;118.10671,24.457562;118.106771,24.457659;118.10684,24.457859;118.106926,24.457986;118.107022,24.458011;118.107106,24.458001;118.107172,24.458005;118.107285,24.458028;118.107294,24.458034;118.107339,24.45812;118.107443,24.45814;118.107548,24.458118;118.107744,24.45805;118.107969,24.458058;118.108076,24.458075;118.108192,24.458065;118.108517,24.458144;118.10871,24.458149;118.109032,24.458089;118.109179,24.458032;118.10968,24.457597;118.10998,24.457409;118.110153,24.457382;118.110377,24.457436;118.110573,24.457538;118.110682,24.457724;118.110658,24.457932;118.110587,24.458094;118.110306,24.458318;118.110262,24.458515;118.110258,24.458732;118.110353,24.458861;118.110621,24.458953;118.110821,24.458963;118.111377,24.458879;118.111501,24.458902;118.111568,24.458961;118.111717,24.459029;118.111909,24.459023;118.11203,24.458962', 'type': 'scenic', 'name': '\xe5\x8e\xa6\xe9\x97\xa8\xe5\x9b\xad\xe6\x9e\x97\xe6\xa4\x8d\xe7\x89\xa9\xe5\x9b\xad'}, {'shape': u'118.091263,24.461111;118.092668,24.461322;118.092766,24.460999;118.092491,24.460519;118.092186,24.46012;118.09198,24.459872;118.091631,24.459569;118.091186,24.45913;118.09072,24.458704;118.090419,24.458327;118.090293,24.457906;118.090179,24.457405;118.089868,24.456503;118.089832,24.456458;118.089784,24.45643;118.08972,24.456422;118.089656,24.456428;118.088705,24.456672;118.088689,24.457071;118.088764,24.457419;118.088219,24.457943;118.088097,24.458073;118.088095,24.45814;118.088125,24.458211;118.08819,24.458229;118.088673,24.458163;118.088762,24.458153;118.088849,24.458188;118.088963,24.458303;118.088915,24.458592;118.088858,24.458807;118.088886,24.458929;118.0889,24.459051;118.08877,24.459135;118.088667,24.459334;118.08862,24.459467;118.088653,24.459649;118.088835,24.4599;118.089484,24.460853;118.090355,24.460924;118.091263,24.461111', 'type': 'scenic', 'name': '\xe4\xb8\xad\xe5\xb1\xb1\xe5\x85\xac\xe5\x9b\xad'}, {'shape': u'118.071133,24.446814;118.070806,24.446565;118.07035,24.446152;118.070338,24.446121;118.07035,24.446085;118.070717,24.445788;118.071027,24.445652;118.07118,24.445568;118.0713,24.445512;118.071388,24.445441;118.071661,24.445735;118.071857,24.445877;118.072096,24.446008;118.072187,24.446063;118.0722,24.446112;118.072187,24.446163;118.071183,24.446857;118.071133,24.446814', 'type': 'scenic', 'name': '\xe5\x8e\xa6\xe9\x97\xa8\xe6\xb5\xb7\xe5\xba\x95\xe4\xb8\x96\xe7\x95\x8c'}, {'shape': u'118.10841,24.505048;118.108395,24.505017;118.108371,24.505006;118.107743,24.505002;118.107448,24.505002;118.107448,24.504957;118.107446,24.504659;118.107678,24.504643;118.107679,24.504003;118.107678,24.503569;118.10769,24.503398;118.1074,24.50329;118.107345,24.503264;118.107217,24.503133;118.107188,24.50309;118.106815,24.502789;118.106446,24.502571;118.106446,24.502519;118.106494,24.502358;118.106585,24.50216;118.106533,24.502079;118.106182,24.501987;118.105344,24.502024;118.105342,24.502227;118.105309,24.502379;118.105297,24.50274;118.105291,24.50283;118.105206,24.502975;118.105159,24.50304;118.105048,24.503241;118.104918,24.503318;118.104437,24.503385;118.104467,24.503652;118.104268,24.503676;118.104292,24.503828;118.104056,24.503858;118.104085,24.504108;118.104143,24.504214;118.104409,24.504428;118.10454,24.504568;118.10499,24.504983;118.105359,24.505353;118.105553,24.505668;118.105943,24.505811;118.106064,24.506025;118.106136,24.506166;118.106142,24.506569;118.107521,24.50655;118.108449,24.506544;118.108452,24.506129;118.108435,24.50568;118.10841,24.505048', 'type': 'scenic', 'name': '\xe6\xb9\x96\xe9\x87\x8c\xe5\x85\xac\xe5\x9b\xad'}, {'shape': u'118.09211,24.473255;118.092047,24.473144;118.092059,24.473008;118.092015,24.472983;118.092033,24.472608;118.091948,24.471837;118.092136,24.471843;118.092584,24.472068;118.092872,24.472267;118.093056,24.472416;118.09308,24.472394;118.093081,24.472367;118.093088,24.472356;118.093104,24.47235;118.093127,24.472356;118.093139,24.472378;118.093131,24.472397;118.093118,24.472405;118.093093,24.472402;118.093072,24.472425;118.093198,24.472547;118.093218,24.472524;118.093218,24.472512;118.093225,24.472493;118.093244,24.472482;118.093272,24.472488;118.09328,24.472506;118.093274,24.472533;118.09326,24.472539;118.093236,24.472536;118.093217,24.472557;118.093278,24.472612;118.093295,24.472584;118.093289,24.472563;118.093295,24.472549;118.093307,24.472538;118.093329,24.472536;118.093348,24.472545;118.093355,24.472567;118.09335,24.47258;118.09334,24.472591;118.093325,24.472598;118.093309,24.472595;118.093292,24.472619;118.093362,24.472668;118.093375,24.472641;118.093374,24.472626;118.093378,24.472606;118.093388,24.472595;118.093409,24.472596;118.093422,24.472606;118.093433,24.472622;118.093426,24.472643;118.093411,24.472649;118.09339,24.47265;118.093371,24.472674;118.093455,24.472734;118.09349,24.472682;118.093512,24.472702;118.09352,24.472684;118.093753,24.472827;118.094243,24.472745;118.094316,24.472805;118.094359,24.472777;118.094422,24.47289;118.094379,24.472909;118.0944,24.472983;118.0944,24.473053;118.094386,24.473131;118.094357,24.473187;118.094312,24.473253;118.094275,24.473273;118.094802,24.473591;118.094881,24.473448;118.094751,24.473378;118.094782,24.473329;118.094915,24.473386;118.094954,24.473298;118.095109,24.473364;118.09503,24.473507;118.095096,24.47354;118.095144,24.473464;118.095282,24.473535;118.095226,24.473636;118.095274,24.473668;118.095249,24.473721;118.095205,24.473699;118.095156,24.47379;118.095685,24.474084;118.095405,24.474572;118.094844,24.47546;118.094794,24.475513;118.094726,24.475529;118.094661,24.475532;118.094237,24.475306;118.094098,24.475203;118.093956,24.475081;118.0938,24.474899;118.093619,24.474627;118.093405,24.474235;118.093229,24.4739;118.093185,24.473814;118.093033,24.473673;118.092641,24.47343;118.092204,24.473278;118.09211,24.473255', 'type': 'scenic', 'name': '\xe7\xa6\x8f\xe5\xbb\xba\xe7\x9c\x81\xe5\x8e\xa6\xe9\x97\xa8\xe5\xb8\x82\xe7\x99\xbd\xe9\xb9\xad\xe6\xb4\xb2\xe5\x85\xac\xe5\x9b\xad'}, {'shape': u'118.110106,24.491152;118.110092,24.491116;118.110486,24.489847;118.110542,24.489827;118.111476,24.490337;118.112312,24.490792;118.112331,24.490753;118.112374,24.490773;118.112473,24.490591;118.112795,24.490712;118.112578,24.491303;118.112343,24.49122;118.112125,24.491221;118.112,24.491257;118.111886,24.491242;118.111848,24.49119;118.110106,24.491152', 'type': 'scenic', 'name': '\xe5\x8e\xa6\xe9\x97\xa8\xe4\xba\x94\xe4\xb8\x80\xe5\xb9\xbf\xe5\x9c\xba'}]
        print(parkInfoList)
        saveParkPolygon(parkInfoList, outPath[index])
